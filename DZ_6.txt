- создать массив с 20 числами.

const arrayNum = [2, 3, 77, 22, 99, 666, 34, 99, 21, 45, 80, 37, 55, 78, 88, 670, 12, 7, 900, 1];

-- при помощи метода sort отсортировать массив.

arrayNum.sort((a, b) => {
  return a - b;
});

console.log(arrayNum);

-- при помощи метода sort и колбека отсортировать массив в ниспадающем напралении.

function sortArray (array, compareFn) {
    compareFn(array);
    return array;
};

function sorting(array) {
  array.sort((a, b) => {
  return b - a;
})};

console.log(sortArray(arrayNum, sorting))

-- при помощи filter получить числа кратные 3

let filter = arrayNum.filter((value) => {
  return value%3 === 0;
});

console.log(filter);

-- при помощи filter получить числа кратные 10

let filter = arrayNum.filter((value) => {
  return value%10 === 0;
});

console.log(filter);

-- перебрать (проитерировать) массив при помощи foreach()

arrayNum.forEach((value) => {
    console.log(value)
});

-- перебрать массив при помощи map() и получить новый массив в котором все значения будут в 3 раза больше

let mapNum = arrayNum.map((value) => {
    value *= 3;
    return value;
});

console.log(mapNum);

- создать массив со словами на 15-20 элементов.

const arrStr = ["Volodymyr", "Nik", "Nadiya","Vasya", "Kolya", "Petr", "Ivan", "Rik", "Oleg", "Bogdan", "Nazar", "Max", "Nina", "Olga", "Alex", "Sergey", "Mariya", "Viktor", "Pol"];

-- отсортировать его по алфавиту в восходящем порядке.

arrStr.sort();
console.log(arrStr);

-- отсортировать его по алфавиту  в нисходящем порядке.

arrStr.sort((a, b) => {
    if (a > b) {
        return -1
    } else {
        return 1
    }
});
console.log(arrStr);

-- отфильтровать слова длиной менее 4х символов

const strFilter = arrStr.filter((value) => {
    if (value.length < 4) {
        return value;
    };
});
console.log(strFilter);

-- перебрать массив при помощи map() и получить новый массив в котором все значения будут со знаком "!" в конце

const map = arrStr.map((value) => {
    value += " !";
    return value;
});
console.log(map);

Все робити через функції масивів (foreach, map ...тд)
Дан масив :
let users = [ {name: 'vasya', age: 31, status: false}, {name: 'petya', age: 30, status: true}, {name: 'kolya', age: 29, status: true}, {name: 'olya', age: 28, status: false}, {name: 'max', age: 30, status: true}, {name: 'anya', age: 31, status: false}, {name: 'oleg', age: 28, status: false}, {name: 'andrey', age: 29, status: true}, {name: 'masha', age: 30, status: true}, {name: 'olya', age: 31, status: false}, {name: 'max', age: 31, status: true} ];
- відсортувати його за  віком (зростання , а потім окремо спадання)

users.sort((a, b) => {
    return a.age - b.age;
});
console.log(users);


users.sort((a, b) => {
    return b.age - a.age;
});
console.log(users);

- відсортувати його за кількістю знаків в імені  (зростання , а потім окремо спадання)

users.sort((a, b) => {
    if (a.name.length < b.name.length) {
        return -1
    } else {
        return 1
    }
});
console.log(users);


users.sort((a, b) => {
    if (b.name.length < a.name.length) {
        return -1
    } else {
        return 1
    }
});
console.log(users);

- пройтись по ньому та додати кожному юзеру поле id - яке характеризує унікальний індентифікатор (По якому принципу його створювати - ваше рішення), та зберегти це в новий масив (первинний масив залишиться без змін)
- відсортувати його за індентифікатором

let usersWithId = users.map((value, index) => {
    step = users.length - index;
    return {
        id: step,
        name: value.name,
        age: value.age, 
        status: value.status
    }
}).sort((a, b) => {
    return a.id - b.id
});
console.log(usersWithId);



-- наисать функцию калькулятора с 2мя числами и колбеком   

function calc(a, b, callBack) {
    console.log(callBack(a, b));
}

function plus(a, b) {
    return a + b;
}

-- наисать функцию калькулятора с 3мя числами и колбеком

function calc(a, b, c, callBack) {
    console.log(callBack(a, b, c));
}

function rezult(a, b, c) {
    return (a + b)/c;
}

=============================================
=============================================
=============КЛАССНАЯ РАБОТА=================
=============================================
=============================================




let cars = [ {producer:"subaru",model: "wrx",year: 2010, color:"blue",type: "sedan",engine: "ej204x",volume: 2,power: 400}, {producer:"subaru",model: "legacy",year: 2007, color:"silver",type: "sedan",engine: "ez30",volume: 3,power: 250}, {producer:"subaru",model: "tribeca",year: 2011, color:"white",type: "jeep",engine: "ej20",volume: 2,power: 300}, {producer:"subaru",model: "leone",year: 1998, color:"yellow",type: "sedan",engine: "ez20x",volume: 2,power: 140}, {producer:"subaru",model: "impreza",year: 2014, color:"red",type: "sedan",engine: "ej204x",volume: 2,power: 200}, {producer:"subaru",model: "outback",year: 2014, color:"red",type: "hachback",engine: "ej204",volume: 2,power: 165}, {producer:"bmw",model: "115",year: 2013, color:"red",type: "hachback",engine: "f15",volume: 1.5,power: 120}, {producer:"bmw",model: "315",year: 2010, color:"white",type: "sedan",engine: "f15",volume: 1.5, power: 120}, {producer:"bmw",model: "650",year: 2009, color:"black",type: "coupe",engine: "f60",volume: 6,power: 350}, {producer:"bmw",model: "320",year: 2012, color:"red",type: "sedan",engine: "f20",volume: 2,power: 180}, {producer:"mercedes",model: "e200",year: 1990, color:"silver",type: "sedan",engine: "eng200",volume: 2,power: 180}, {producer:"mercedes",model: "e63",year 2017, color:"yellow",type: "sedan",engine: "amg63",volume:3,power: 400}, {producer:"mercedes",model: "c250",year: 2017, color:"red",type: "sedan",engine: "eng25",volume: 2.5,power: 230} ];
Відфільтрувати масив за наступними крітеріями :
- двигун більше 3х літрів

const carsFilter = cars.filter((value) => {
    if (value.volume > 3) {
        return value
    }
});
console.log(carsFilter);

- двигун = 2л

const carsFilter = cars.filter((value) => {
    if (value.volume === 2) {
        return value
    }
});
console.log(carsFilter);

- виробник мерс

const carsFilter = cars.filter((value) => {
    if (value.producer === "mercedes") {
        return value
    }
});
console.log(carsFilter);

- двигун більше 3х літрів + виробник мерседес

const carsFilter = cars.filter((value) => {
    if (value.volume > 3 && value.producer === "mercedes") {
        return value
    }
});
console.log(carsFilter);

- двигун більше 3х літрів + виробник субару

const carsFilter = cars.filter((value) => {
    if (value.volume > 3 && value.producer === "subaru") {
        return value
    }
});
console.log(carsFilter);

- сили більше ніж 300

const carsFilter = cars.filter((value) => {
    if (value.power > 300) {
        return value
    }
});
console.log(carsFilter);

- сили більше ніж 300 + виробник субару

const carsFilter = cars.filter((value) => {
    if (value.power > 300 && value.producer === "subaru") {
        return value
    }
});
console.log(carsFilter);

- мотор серіі ej

const carsFilter = cars.filter((value) => {
    if (value.engine.includes("ej")) {
        return value
    }
});
console.log(carsFilter);

- сили більше ніж 300 + виробник субару + мотор серіі ej

const carsFilter = cars.filter((value) => {
    if (value.power > 300 && value.producer === "subaru" && value.engine.includes("ej")) {
        return value
    }
});
console.log(carsFilter);

- двигун меньше 3х літрів + виробник мерседес

const carsFilter = cars.filter((value) => {
    if (value.volume < 3 && value.producer === "mercedes") {
        return value
    }
});
console.log(carsFilter);

- двигун більше 2л + сили більше 250

const carsFilter = cars.filter((value) => {
    if (value.volume > 2 && value.power > 250) {
        return value
    }
});
console.log(carsFilter);

- сили більше 250  + виробник бмв

const carsFilter = cars.filter((value) => {
    if (value.power > 250 && value.producer === "bmw") {
        return value
    }
});
console.log(carsFilter);

- взять слдующий массив
let usersWithAddress = [{id: 1, name: 'vasya', age: 31, status: false, address: {city: 'Lviv', street: 'Shevchenko', number: 16}}, {id: 2, name: 'petya', age: 30, status: true, address: {city: 'Lviv', street: 'Shevchenko', number: 1}}, {id: 3, name: 'kolya', age: 29, status: true, address: {city: 'Lviv', street: 'Shevchenko', number: 121}}, {id: 4, name: 'olya', age: 28, status: false, address: {city: 'Lviv', street: 'Shevchenko', number: 90}}, {id: 5, name: 'max', age: 30, status: true, address: {city: 'Lviv', street: 'Shevchenko', number: 115}}, {id: 6, name: 'anya', age: 31, status: false, address: {city: 'Lviv', street: 'Shevchenko', number: 2}}, {id: 7, name: 'oleg', age: 28, status: false, address: {city: 'Lviv', street: 'Shevchenko', number: 22}}, {id: 8, name: 'andrey', age: 29, status: true, address: {city: 'Lviv', street: 'Shevchenko', number: 43}}, {id: 9, name: 'masha', age: 30, status: true, address: {city: 'Lviv', street: 'Shevchenko', number: 12}}, {id: 10, name: 'olya', age: 31, status: false, address: {city: 'Lviv', street: 'Shevchenko', number: 16}}, {id: 11, name: 'max', age: 31, status: true, address: {city: 'Lviv', street: 'Shevchenko', number: 121}}];
-- отсортировать его по id пользователей

const usersWithAddressSort = usersWithAddress.sort((a, b) => {
    return a.id - b.id;
});
console.log(usersWithAddressSort);

-- отсортировать его по id пользователей в обратном опрядке

usersWithAddress.sort((a, b) => {
    return a.id - b.id;
});
console.log(usersWithAddress);

-- отсортировать его по возрасту пользователей

usersWithAddress.sort((a, b) => {
    return a.age - b.age;
});
console.log(usersWithAddress);

-- отсортировать его по возрасту пользователей в обратном порядке

usersWithAddress.sort((a, b) => {
    return b.age - a.age;
});
console.log(usersWithAddress);

-- отсортировать его по имени пользователей

usersWithAddress.sort((a, b) => {
    if (a.name < b.name) {
        return -1
    } else {
        return 1
    }
});
console.log(usersWithAddress);

-- отсортировать его по имени пользователей в обратном порядке

usersWithAddress.sort((a, b) => {
    if (a.name > b.name) {
        return -1
    } else {
        return 1
    }
});
console.log(usersWithAddress);

-- отсортировать его по названию улицы  в алфавитном порядке

usersWithAddress.sort((a, b) => {
    if (a.address.street < b.address.street) {
        return -1
    } else {
        return 1
    }
});
console.log(usersWithAddress);

-- отсортировать его по номеру дома по возрастанию

usersWithAddress.sort((a, b) => {
    return a.address.number - b.address.number;
});
console.log(usersWithAddress);

-- отфильтровать (оставить) тех кто младше 30

const usersWithAddressFilter = usersWithAddress.filter((value) => {
    if (value.age < 30) {
        return value;
    };
});
console.log(usersWithAddressFilter);

-- отфильтровать (оставить) тех у кого отрицательный статус

const usersWithAddressFilter = usersWithAddress.filter((value) => {
    if (value.status === false) {
        return value;
    };
});
console.log(usersWithAddressFilter);

-- отфильтровать (оставить) тех у кого отрицательный статус и младше 30 лет

const usersWithAddressFilter = usersWithAddress.filter((value) => {
    if (value.status === false && value.age < 30) {
        return value;
    };
});
console.log(usersWithAddressFilter);

-- отфильтровать (оставить) тех у кого номер дома четный

const usersWithAddressFilter = usersWithAddress.filter((value) => {
    if (value.address.number % 2 === 0) {
        return value;
    };
});
console.log(usersWithAddressFilter);

===========================
======ДОПОЛНИТЕЛЬНО========
===========================

Створити обєкт автомобіля з полями:
Марка автомобля, потужність двигуна, власник, ціна, рік випуску.
Власник автомобіля теж має бути обєкт, у якого є поля
Імя, вік, стаж водіння.
Створити не менше 7 та не більше 20 машинок.
Зробили половину автопарку ремонт мотору, що збільшить потужність автомобілів на 10% (переприсвоєння змінної потужності).
На відремонтовані автомобілі найняти нових водіїв (переприсвоїти змінну водій).
Для початку вкладіть всі наші створені автомобілі в масив cars.
Далі необхідно рати кожну другу машинку (цикл з кроком в 2), та робити їй підвищення потужності двигуна на 10% та ціну на 5%
Після того зробити перевірку досвіду ВСІХ наших водіїв. Якщо досвід водія менший за 5 років, але його вік більший за 25, то необідно відправити його на курси підвищення кваліфікації, що збільшить йому досвід на 1 рік.
Також спробуйте порахувати суму, яку потрібно потратити для покупки всіх цих авто в циклі

let cars = [{mark:"toyota", year: 2016, cost: 350000, power: 140, driver: {name: "Sasha", age: 26, experience: 3}},{mark:"lexus", year: 2019, cost: 200000, power: 600, driver: {name: "Valera", age:54, experience: 9}},{mark:"shkoda", year: 2000, cost: 15000, power: 120, driver: {name: "Petya", age: 40, experience: 2}},{mark:"subaru", year: 2010, cost: 20000, power: 400, driver: {name: "Vasya", age: 34, experience: 5}},{mark:"ferari", year: 2019, cost: 100000, power: 450, driver: {name: "Alex", age: 25, experience: 7}},{mark:"mersedes", year: 2017, cost: 50000, power: 100, driver: {name: "Vova", age: 26, experience: 3}},{mark:"reno", year: 2001, cost: 10000, power: 300, driver: {name: "Vera", age: 54, experience: 8}},{mark:"bmw", year: 2008, cost: 25000, power: 300, driver: {name: "Kolya", age: 30, experience: 4}},];

cars.forEach((value, index) => {
    if (index%2 !== 0) {
        return
    } else {
        value.power = value.power + value.power*0.1;
        value.cost = value.cost + value.cost*0.05;
    }
});

cars.map((value) => {
    if (value.driver.experience < 5 && value.driver.age > 25) {
        value.driver.experience = value.driver.experience +1;
    }
});

let totalCost = 0;
cars.forEach((value) => {
    totalCost = totalCost + value.cost;
});

console.log(totalCost);

Задача: дан отсортированный по возрастанию массив целых чисел. Необходимо вернуть наименьший и наибольший индекс заданного элемента.
Входные данные: arr — массив целых чисел значения которых по модулю не больше 10. Размер массива не более 10 элементов.
Вывод: наибольший и наименьший индекс в массиве заданного элемента. Если такого элемента нет в массиве, выведите -1.

Пример:
Arr = [1, 2, 3, 4, 4, 4, 4, 7, 7, 9, 14]
1. Key = 1
Answer: MinIndex = 0, MaxIndex = 0.
2. Key = 4
Answer: MinIndex = 3, MaxIndex = 6.

function findIndicesKey(array, key) {
    let min = array.findIndex(value => {
        return value === key
    });
    if (min === -1) {
        console.log(min);
    } else {
        let max = array.lastIndexOf(key);
        console.log(`MinIndex = ${min}, MaxIndex = ${max}.`);
    }
}
