- створити функцію яка виводить масив

function arrConsol(arr) {
	for (let iterator of arr) {
		console.log(iterator);		
	}
}

- створити функцію яка заповнює масив рандомними числами та виводить його. Для виведення використати попвередню функцію. 

function createArray(arrayLength) {
    let arrNum = [];
    for (i = 0; i < arrayLength; i++) {
        arrNum[i] = Math.floor(Math.random() * 100) ; 
    } 
    return arrNum;   
}

arrConsol(createArray(20));

- створити функцію яка приймає три числа та виводить та повертає найменьше.

function minimum(a, b, c) {
    let min;
    if (a < b) {
        if (a < c) {
            min = a;
        } else {
            min = c;
        }
    } else if (b < c) {
        min = b;
    } else {
        min = c;
    }
    console.log(min);
    return min;
}

- створити функцію яка приймає три числа та виводить та повертає найбільше.

function maximum(a, b, c) {
    let max;
    if (a > b) {
        if (a > c) {
            max = a;
        } else {
            max = c;
        }
    } else if (b > c) {
        max = b;
    } else {
        max = c;
    }
    console.log(max);
    return max;
}

- створити функцію яка приймає будь-яку кількість чисел, повертає найменьше, а виводить найбільше  

function arrMaximumMinimum() {
    let min = arguments[0];
    let max = arguments[0];
    for (let i = 1; i < arguments.length; i++) {
        if (arguments[i] < min) {
            min = arguments[i]
        } else if (arguments[i] > max) {
            max = arguments[i]            
        }
    }
    console.log(max);
    return min;    
}

- створити функцію яка виводить масив

function arrConsol(arr) {
	for (let element of arr) {
		console.log(element);		
	}
}

- створити функцію яка повертає найбільше число з масиву

function arrMaximum(arr) {
    let max = arr[0];
    for (let i = 1; i < arr.length; i++) {
        if (arr[i] > max) {
            max = arr[i]
        }
    }
    return max;
}

- створити функцію яка повертає найменьше число з масиву

function arrMinimum(arr) {
    let min = arr[0];
    for (let i = 1; i < arr.length; i++) {
        if (arr[i] < min) {
            min = arr[i]
        }
    }
    return min;    
}

- створити функцію яка приймає масив чисел та складає значення елементів масиву та повертає його.

function arrTotal(arr) {
    let sum = 0;
	for (let element of arr) {
        sum = sum + element;			
	}
    return sum;
}

- створити функцію яка приймає масив чисел та повертає середнє арифметичне його значень.

function arrAverage(arr) {
    let sum = 0;
	for (let element of arr) {
        sum = sum + element;			
	}
    let average = sum/arr.length;
    return average;
}

- Створити функцію яка приймає масив будь яких объектів, та повертає значення кількості об'єктів в масиві

function arrLength(arr) {
    return arr.length;
}

- Створити функцію яка приймає масив будь яких объектів, та повертає загальн кількість полів в них

function arrObjectField(arr) {
    let sumField = 0;
    for (let iterator of arr) {
        for (let key in iterator) {
            sumField++;
        }
    }
    return sumField;
}

- створити функцію  яка скаладає значення елементів з однаковими індексами  та повертає новий результуючий масив.
  Приклад
  [1,2,3,4]
  [2,3,4,5]
  результат
  [3,5,7,9]

function arraySum(arrFirst, arrSecond) {
    let arrNew = [];
    for (let first in arr1) {
        arrNew.push(arrFirst[first] + arrSecond[first])            
        }        
    return arrNew;
}

- *** приймає масив та число "i", та міняє місцями об`єкт який знаходиться в індексі "i" на "i+1"

function arrayChange(arr, i) {
    let change = arr[i];
    arr[i] = arr[i + 1];
    arr[i + 1] = change;
    return arr;       
}

- *** створити функцію яка буде переносити елементи з значенням 0 у кінець маисву. Зберігаючи при цьому порядок не нульових значень.
Двожина масиву від 2 до 100
Приклад
[1,0,6,0,3] => [1,6,3,0,0]
[0,1,2,3,4] => [1,2,3,4,0]
[0,0,1,0]   => [1,0,0,0]

function arrConsol(arr) {
    if (arr.length < 2 || arr.length > 100) {
        console.log("Неверная длина массива");
    } else {
        let i = 0;
        while (i < arr.length - 1) {
            for (let i = 0; i < arr.length - 1; i++) {
                if (arr[i] === 0) {
                    arr[i] = arr[i + 1];
                    arr[i + 1] = 0;
                }
            }
            i++
        }   
        console.log(arr)
    }   
} 

Створити функцію яка :
- Додає в боді блок з текстом "Hello owu"

function insertTag() {
    let newTag = document.createElement("div");
    newTag.style.border = "3px solid green";
    document.body.appendChild(newTag);
    newTag.innerText = "Hello owu";
}

- Додає в боді елемент з текстом . Тип елементу та текст отримати через аргументи

function insertTag(tag, text) {
    let newTag = document.createElement(tag);
    newTag.style.border = "3px solid green";
    document.body.appendChild(newTag);
    newTag.innerText = text;
}

- приймає масив автомобілів (можна взяти з попередніх дз ),та  індентифікатор елемнту в який потрібно додати список цих автомобілів.
Для кожного автомобіля створити свій блок, та додати його в елемент, індентифікатор якого ви отримали. Всі властивості авто в обному блоці

function insertArray(arr, idTag) {
    let outerTag = document.getElementById(idTag);
    for (let iterator of arr) {
        innerTag = document.createElement("div");
        innerTag.style.border = "3px solid green"
        outerTag.appendChild(innerTag);
        for (let key in iterator) {
            innerTag.innerText = `${innerTag.innerText} ${iterator[key]}`
        }
    }
}

- приймає масив автомобілів (можна взяти з попередніх дз ),та  індентифікатор елемнту в який потрібно додати список цих автомобілів.
Для кожного автомобіля створити свій блок, та додати його в елемент, індентифікатор якого ви отримали.
Для кожної властивості створити всередені блока автомоблія свій блок

function insertArray(arr, idTag) {
    let outerTag = document.getElementById(idTag);
    for (let iterator of arr) {
        innerTag = document.createElement("div");
        innerTag.style.border = "3px solid silver"
        outerTag.appendChild(innerTag);
        for (let key in iterator) {
            insertAuto = document.createElement("div");
            insertAuto.style.border = "3px solid green"
            innerTag.appendChild(insertAuto);
            insertAuto.innerText = `${insertAuto.innerText} ${iterator[key]}`
        }
    }
}

(на основі минулого ДЗ)
**- функція приймає 2 масиви з рівною кількістю об'єктів та з'єднює в один об'єкт користувача та місто з відповідними "id" та "user_id",
та повертає масив цих з'єднаних об'єктів.
Приклад масивів:
            let usersWithId = [{id: 1, name: 'vasya', age: 31, status: false}, {id: 2, name: 'petya', age: 30, status: true}, {id: 3, name: 'kolya', age: 29, status: true}, {id: 4, name: 'olya', age: 28, status: false},];
            let citiesWithId = [{user_id: 3, country: 'USA', city: 'Portland'}, {user_id: 1, country: 'Ukraine', city: 'Ternopil'}, {user_id: 2, country: 'Poland', city: 'Krakow'}, {user_id: 4, country: 'USA', city: 'Miami'},];
Частковий приклад реультату:

function arrConcat(arrOuter, arrInner) {
	let usersWithCities = [];
for (let val of usersWithId) {
        for (let val1 of citiesWithId) {
        if (val.id === val1.user_id) {
            val.address = val1;
            usersWithCities.push(val)
        }
    }
}
console.log(usersWithCities);
}

***- беремо завдання з правилами з укроку №3 :
Та робимо це функцією.При цьому правила отримувати через аргумент.
"Є масив котрий характеризує правила. Створити скрипт який ітерує цей масив, та робить з кожне правило в окремому блоці.
При цому в блоці, номер правила записати в свій блок, текст правила записати в свій окремий блок.
Результатом відпрацювання скріпта повинна бути структура яка міститься в блоці wrap файла rule.html
//todo add rules

			let rules = [
				{
					title: 'Первое правило Бойцовского клуба.',
					body: 'Никому не рассказывать о Бойцовском клубе.'
				},
				{
					title: 'Второе правило Бойцовского клуба.',
					body: 'Никогда никому не рассказывать о Бойцовском клубе.'
				},
				{
					title: 'Третье правило Бойцовского клуба.',
					body: 'В схватке участвуют только двое.'
				},
				{
					title: 'Четвертое правило Бойцовского клуба.',
					body: 'Не более одного поединка за один раз.'
				},
				{
					title: 'Пятое правило Бойцовского клуба.',
					body: 'Бойцы сражаются без обуви и голые по пояс.'
				},
				{
					title: 'Шестое правило Бойцовского клуба.',
					body: 'Поединок продолжается столько, сколько потребуется.'
				},
				{
					title: 'Седьмое правило Бойцовского клуба.',
					body: 'Если противник потерял сознание или делает вид, что потерял, или говорит «Хватит» — поединок окончен.'
				},
				{
					title: 'Восьмое и последнее правило Бойцовского клуба.',
					body: 'Новичок обязан принять бой.'
				},

			];

function klubRules(arr) {
	let body = document.getElementsByTagName("body");
	let wrap = document.createElement("div");
	wrap.style.display = "flex";
	wrap.style.flexWrap = "wrap";
	wrap.style.width = "800px";
	wrap.style.height = "800px";
	wrap.style.backgroundColor = "silver";
	body[0].appendChild(wrap);
	for (const iterator of arr) {
    	let divka = document.createElement("div");
    	divka.style.border = "2px solid red";
    	divka.style.width = "200px";
    	divka.style.height = "200px";
	    divka.innerText = iterator.title;
    	wrap.appendChild(divka);
    	let divkaInner = document.createElement("div");
    	divkaInner.style.marginTop = "50px"
    	divkaInner.innerText = iterator.body;
		divka.appendChild(divkaInner);
	}
}

===========додаткове від віктора========                 
1) Точная степень двойки.
Дано натуральное число N.
Выведите слово YES, если число N является точной степенью двойки,
или слово NO в противном случае.
Операцией возведения в степень пользоваться нельзя!

function powTwo(num) {
    switch (num) {
        case 0:
            console.log("NO");
            break;
        case 1:
            console.log("YES");
            break;
        default:
            if (num%2 === 0) {
                num = num/2;
                if (num === 1) {
                    console.log("YES");
                } else {
                    powTwo(num);
                }
            } else {
                console.log("NO");
            }
    }
} 

2) Deep Copy
реалізувати глибоке копіювання обєкту за допомогою рекурсій  &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

function deepCopy(object) {
    let objectCopy = {};
    for (const key in object) {
        if (typeof(object[key]) === "object") {
                deepCopy(object[key]) 
                objectCopy[key] = object[key];
        } else {                        
            objectCopy[key] = object[key];
        }      
    }
    return objectCopy;
} 

3) Flat
Вирівняти багаторівневий масив в однорівневий
[1,3, ['Hello, 'Wordd', [9,6,1]], ['oops'], 9] -> [1, 3, 'Hello, 'Wordd', 9, 6, 1, 'oops', 9]

let arrFlat = [];
function flat(arr) {
    for (const key of arr) {
        if (typeof(key) === "object") {
            arr = key;
            flat(arr);            
        } else {
            arrFlat.push(key);
        }
    }
    return arrFlat;
} 

